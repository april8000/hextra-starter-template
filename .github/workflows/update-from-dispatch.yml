name: Update Content from Backend Dispatch

on:
  repository_dispatch:
    types: [daily-updated]
  workflow_dispatch:
  schedule:
    - cron: '35 0 * * *'  # 比主项目晚5分钟执行

env:
  TZ: Asia/Shanghai

jobs:
  update-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          repository: 'april8000/ai-insight-daily-token'
          ref: 'main'
          path: 'source-repo'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new content
        id: check-updates
        run: |
          echo "🔍 检查源仓库中的新内容..."
          
          has_updates=false
          files_processed=0
          
          if [ -d "source-repo/daily" ]; then
            echo "📁 源仓库daily目录存在"
            echo "源仓库daily目录内容:"
            ls -la source-repo/daily/
            
            # 确保content/docs目录存在
            mkdir -p "content/docs"
            
            # 遍历所有source-repo/daily中的.md文件
            for source_file in source-repo/daily/*.md; do
              if [ -f "$source_file" ]; then
                filename=$(basename "$source_file")
                echo "处理文件: $filename"
                
                # 检查是否为日期格式的文件
                if echo "$filename" | grep -qE '^[0-9]{4}-[0-9]{2}-[0-9]{2}\.md$'; then
                  file_date=$(echo "$filename" | sed 's/\.md$//')
                  
                  echo "文件日期: $file_date"
                  
                  # 目标文件路径（简化版，直接放在docs目录下）
                  target_file="content/docs/$filename"
                  
                  # 强制更新所有文件（因为这是starter模板）
                  echo "✅ 强制处理文件: $source_file -> $target_file"
                  
                  # 直接写入Front Matter
                  echo "---" > "$target_file"
                  echo "title: \"AI日报 ${file_date}\"" >> "$target_file"
                  echo "date: ${file_date}T08:00:00+08:00" >> "$target_file"
                  echo "weight: 1" >> "$target_file"
                  echo "---" >> "$target_file"
                  echo "" >> "$target_file"
                  
                  # 添加原始内容
                  cat "$source_file" >> "$target_file"
                  
                  echo "✅ 文件已处理: $target_file"
                  files_processed=$((files_processed + 1))
                  has_updates=true
                else
                  echo "⚠️ 文件名格式不符合YYYY-MM-DD.md: $filename"
                fi
              fi
            done
            
            echo "📊 处理结果:"
            echo "处理的文件数量: $files_processed"
            echo "是否有更新: $has_updates"
            
            # 设置输出变量
            echo "has_updates=$has_updates" >> $GITHUB_OUTPUT
            echo "files_processed=$files_processed" >> $GITHUB_OUTPUT
            
          else
            echo "❌ 源仓库中没有daily目录"
            echo "源仓库根目录内容:"
            ls -la source-repo/ || echo "无法列出源仓库目录"
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "files_processed=0" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          echo "📤 准备提交更改..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          echo "当前git状态:"
          git status
          
          echo "待提交的文件:"
          git add .
          git status --porcelain
          
          if git diff --staged --quiet; then
            echo "ℹ️ 没有需要提交的更改"
          else
            echo "✅ 发现更改，准备提交..."
            git commit -m "📰 更新AI日报 - 处理文件数: ${{ steps.check-updates.outputs.files_processed }}"
            git push
            echo "🎉 内容已更新并推送到仓库!"
          fi

      - name: Summary
        if: always()
        run: |
          echo "📊 执行总结:"
          echo "工作流触发方式: ${{ github.event_name }}"
          echo "是否有更新: ${{ steps.check-updates.outputs.has_updates }}"
          echo "处理文件数: ${{ steps.check-updates.outputs.files_processed }}"
          
          echo ""
          echo "📁 当前content目录结构:"
          if [ -d "content" ]; then
            find content -type f -name "*.md" | sort
          else
            echo "content目录不存在"
          fi
          
          echo ""
          echo "📅 源仓库daily目录内容:"
          if [ -d "source-repo/daily" ]; then
            ls -la source-repo/daily/
          else
            echo "源仓库daily目录不存在"
          fi
